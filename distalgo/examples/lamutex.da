class P(DistProcess):
     def setup(ps, n):
          q = set()

     def cs(task):
          # to enter cs, enque and send request to all, then await replies from all
          --start
          reqc = logical_clock()
          q.add((reqc, self))
          send(Request(reqc), ps)
                
          await(all(((reqc, self) <= (c2, p2)) for (c2, p2) in q) and
                all(any(c2 > reqc for c2 in received(Reply(_, p3))) for p3 in ps))

       # critical section
          task()

       # to exit cs, deque and send releases to all
          --release
          q.remove((reqc, self))
          send(Release(reqc), ps)
          output("release cs", logging.WARN)

     def main():
          def anounce():
               output("In cs!")
          for i in range(n):
               cs(anounce)

     # when receiving requests from others, enque and reply
     def OnRequest(reqts):
         q.add((reqts, _source))
         send(Reply(logical_clock(), self), _source)

     # when receiving release from others, deque
     def OnRelease(time):
         if ((time, _source) in q):
           q.remove((time, _source))

def main():
 nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10

 ps = createprocs(P, nprocs)
 # setup the processes
 for p in ps: setupprocs({p}, [ps-{p}, 1])
 # start the processes
 startprocs(ps)
 for p in ps: p.join()
