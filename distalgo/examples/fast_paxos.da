from random import randint
import sys
import copy

NOPS = 10                       # Number of operations of the state machine
operations = {i: (lambda state: (state+i,state+i)) for i in range(NOPS)}

class Replica(DistProcess):
    def setup(leaders, acceptors, initial_state):
        state = initial_state
        proposal = ();

    def main():
        await(False)

    def propose(p):
        proposal = p
        send(Propose(p), leaders | acceptors)
        output("Done proposing")

    def perform(p):
        k, cid, op = p
        next, result = operations[op](state)
        state = next
        output("sending another response")
        send(Response(cid, result), k)
        sys.exit(0)

    def OnRequest(p):
        output("send proposal")
        propose(p)

    def OnDecision(p):
        perform(p)

class Acceptor(DistProcess):
    def setup():
        ballot_num = (-1, -1)   # bottom
        accepted = set()
        proposals = list()

    def main():
        await(False)

    def OnP1a(lam, b):
        output("In P1a")
        if b > ballot_num:
            ballot_num = b
        send(P1b(self, ballot_num, accepted), lam)
        output("Acceptor sent p1b")

    def OnP2a(lam, load):
        b, p = load
        if b >= ballot_num :
            ballot_num = b
            accepted.add((self, b, p))
        send(P2b(self, ballot_num, p), lam)

    def OnAny(lam, b):
        if b >= ballot_num:
            ballot_num = b
        p = proposals.pop(0)
        print(proposals)
        print(p)
        accepted.add((self, b, p))
        send(P2b(self, ballot_num, p), lam)
        output("Sent P2b")
        
    def OnPropose(p):
        proposals.append(p)

class Leader(DistProcess):
    def setup(acceptors, replicas):
        ballot_num = (0, self)
        active = False
        proposal = set()
        quorum = form_quorum(acceptors)

    def main():
        output("Spawning Scout")
        spawn(Scout, [self, acceptors, ballot_num, quorum, 0])
        await(False)

    def OnPropose(p):
        proposal.add(p)
        if active:
            spawn(Commander, [self, acceptors, replicas, (ballot_num, p), quorum, 0])
            output("Commander spawned")

    def OnAdopted(ballot_num_, pvals, subset):
        if ballot_num_ == ballot_num:
            output("Adopted started")
            if len(pmax(pvals)) == 0:
                output("Fast round commander")
                spawn(Commander, [self, acceptors, replicas, (ballot_num, (-1, -1, -1)), quorum, 1])
            elif len(pmax(pvals)) == 1:
                output("Single value in figure 2")
                (a, p) = pmax(pvals).pop()
                spawn(Commander, [self, acceptors, replicas, (ballot_num, p), quorum, 0])
            else:
                p = observation4(pvals, subset)
                if len(p) > 0:
                    p = p.pop()
                    output("Observation 4 satisfied")
                    spawn(Commander, [self, acceptors, replicas, (ballot_num, p), quorum, 0])
                else:
                    p = proposal.pop()
                    output("Collision recovery")
                    spawn(Commander, [self, acceptors, replicas, (ballot_num, p), quorum, 0])
            active = True
            output("Adopted Done")

    def OnPreempted(b, round_type):
        r1, lam1 = b
        if (b > ballot_num) or (round_type == 1):
            active = False
            ballot_num = (r1+1, self)
            spawn(Scout, [self, acceptors, ballot_num, quorum, 0])
            output("Preempted done")

    def observation4(pvals, subset):
        p_set = pmax(pvals)
        value1 = {p for (a, b, p) in pvals if a == subset[0]}
        value2 = {p for (a, b, p) in pvals if a == subset[1]}
        if value1 == value2:
            return value1
        else:
            return list()

    def pmax(pvals):
        return {(a,p) for (a, b, p) in pvals
                if all(b1 <= b for (a, b1, p1) in pvals)}

    def form_quorum(acceptors):
        quorum = list()
        acceptors_copy = copy.deepcopy(acceptors)
        common_element = acceptors_copy.pop()
        while len(acceptors_copy) > 0:
            quorum.append([common_element, acceptors_copy.pop()])
        return quorum 
            
class Commander(DistProcess):
    def setup(lam, acceptors, replicas, load, quorum, round_type):
        b, p = load
        done = False
        quorum_done = list()
        accepted = set()
        for i in range(0, len(quorum)):
            quorum_done.append(list())
            for j in range(0, 2):
                quorum_done[i].append(0)

    def main():
        if round_type:
            output("Sending P2 any")
            send(Any(self, b), acceptors)
        else:
            output("Sending regular P2a")
            send(P2a(self, (b, p)), acceptors)
        await(done)

    def OnP2b(a, b1, p):
        if (b1 == b):
            accepted.add((a, p))
            subset = quorum_replied(a)
            if len(subset) > 0:
                value1 = {p for (a, p) in accepted if a == subset[0]}
                value2 = {p for (a, p) in accepted if a == subset[1]}
                if value1 == value2:
                    p = value1.pop()
                    output("Decision sent")
                    send(Decision(p), replicas)
                else:
                    r, l = ballot_num
                    ballot_num = (r+1, l)
                    spawn(Scout, [self, acceptors, ballot_num, quorum, 0])
                done = True
            output("Decision might be sent")
        else:
            send(Preempted(b1, round_type), lam)
            done = True
            output("Preempted")

    def quorum_replied(a):
        for i in range(0, len(quorum)):
            for j in range(0, 2):
                if (quorum[i][j] == a):
                    quorum_done[i][j] = 1
        for i in range(0, len(quorum)):
            if (quorum_done[i][0] and quorum_done[i][1]):
                return quorum[i]
        return list()


class Scout(DistProcess):
    def setup(lam, acceptors, b, quorum, round_type):
        pvalues = set()
        done = False
        quorum_done = list()
        for i in range(0, len(quorum)):
            quorum_done.append(list())
            for j in range(0, 2):
                quorum_done[i].append(0)

    def main():
        import time
        import random
        time.sleep(random.random())
        send(P1a(self, b), acceptors)
        output("P1a sent")
        await(done)

    def OnP1b(a, b1, r):
        if b1 == b:
            pvalues.update(r)
            subset = quorum_replied(a)
            if len(subset) > 0:
                send(Adopted(b, pvalues, subset), lam)
                done = True
                output("Adopted sent")
        else:
            send(Preempted(b1, 0), lam)
            done = True
            output("preempted sent")

    def quorum_replied(a):
        for i in range(0, len(quorum)):
            for j in range(0, 2):
                if (quorum[i][j] == a):
                    quorum_done[i][j] = 1
        for i in range(0, len(quorum)):
            if (quorum_done[i][0] and quorum_done[i][1]):
                return quorum[i]
        return list()

class Client(DistProcess):
    def setup(replicas):
        cid = 0
        results = dict()
        count = dict()

    def main():
        send(Request((self, cid, randint(0, NOPS-1))), replicas)
        await(results.get(cid) != None and count.get(cid) == len(replicas))
        output("Received result %d:%d" % (cid, results[cid]))

    def OnResponse(cid, result):
        if results.get(cid) == None:
            results[cid] = result
            count[cid] = 1
        else:
            if results[cid] != result:
                output("Replicas out of sync at cid(%d) : %d - %d " %
                       (cid, results[cid], result))
            else:
                count[cid] += 1

def main():
    nacceptors = 5
    nreplicas = 5
    nleaders = 3
    nclients = 5
    nops = 5

    use_channel("tcp")

    acceptors = createprocs(Acceptor, nacceptors, [])
    replicas = createprocs(Replica, nreplicas)
    leaders = createprocs(Leader, nleaders, (acceptors, replicas))
    clients = createprocs(Client, nclients, (replicas,))
    setupprocs(replicas, (leaders, acceptors, 0))

    startprocs(acceptors)
    startprocs(replicas | leaders)
    startprocs(clients)

    for p in acceptors | replicas | leaders | clients: p.join()
